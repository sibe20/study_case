# -*- coding: utf-8 -*-
"""analysis for fitBit fitness tracker

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OIyztMBmgxPWgmLHe-K7c79Rb3BbZqqp

### 1. **Introduction**
The dataset used in this analysis contains daily activity data for Fitbit users, including the number of steps taken, distance traveled, and calories burned. The goal of this analysis was to explore the activity patterns across users, identify any trends in their activity levels, and categorize users based on their physical activity.
"""

!pip install kaggle

!pip install opendatasets

import opendatasets as od
od.download("https://www.kaggle.com/datasets/arashnic/fitbit/data")

!pip install pandas matplotlib seaborn

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# **2. Data Overview and Preprocessing**
The Fitbit dataset was obtained from Kaggle and consists of several files, including information on daily steps, distance, and calories burned by different users over a period of time. Key steps in the preprocessing phase included:

Handling Missing Values: Missing values in the dataset were identified and handled to ensure data integrity.

Removing Irrelevant Users: One user with no recorded activity was identified and removed from the dataset to avoid skewing the analysis.

Data Conversion: Date columns were converted to datetime format, and numerical columns like Calories and TotalSteps were converted to appropriate numeric types for easier analysis.

Key Actions:

1.   Identified duplicate data.
2.   Converted columns to proper data types


"""

import pandas as pd
df=pd.read_csv("/content/fitbit/mturkfitbit_export_3.12.16-4.11.16/Fitabase Data 3.12.16-4.11.16/dailyActivity_merged.csv")
print(df.isnull().sum())

import pandas as pd

# Load the dataset
df_calories = pd.read_csv("/content/fitbit/mturkfitbit_export_4.12.16-5.12.16/Fitabase Data 4.12.16-5.12.16/dailyCalories_merged.csv")

# Display the columns
print(df_calories.columns)
df_calories.isnull().sum()

"""to check data types

---


"""

print(df_calories.dtypes)

print(df_calories.head())

df_calories['ActivityDay'] = pd.to_datetime(df_calories['ActivityDay'])
df_calories['Calories']=pd.to_numeric(df_calories['Calories'])

print(df_calories.dtypes)

"""to check for duplicates

---


"""

print(df_calories.duplicated().sum())

print(df.columns)

"""# ***now for the analyis***

*⦁*	What are the average daily steps, distance, and calories burned across all users?



---



---



---
"""

print(df['Id'].duplicated().sum())

print(len(df['Id'].unique()))

"""=> that means there only 35 users with diffrent days loggings

now let's see if the days recorded are the same across all users
"""

user_number=0
for i in df.groupby('Id')['ActivityDate']:
  #print('here',i)
  user_number = user_number+1
  print("user number",user_number,'has ',len(i[1])-1,'days')
print('-'*50)
print("each user has diffrent days of logging")

x=0
user_with_no_record=None
for i in df.groupby('Id')['TotalSteps']:

    x=x+1
    if i[1].mean()==0:
      print('user number',x,'has no record his id is',i[0])
      user_with_no_record=i[0]

      continue


    print('the average  total steps for user ',x,'is',int(i[1].mean().round()))
print('the id if the user that must be deleted is ',user_with_no_record)

"""I noticed that there is a user with no record so we will delete it

here is one way to delete it
"""

new_df=df[df['Id']!=user_with_no_record]

"""here is another way"""

indices_to_drop=df[df['Id']==user_with_no_record].index
print(indices_to_drop)
new_df_drop=df.drop(indices_to_drop)
print('the old df ',df.shape)
print('now we have ',indices_to_drop.shape[0],'rows to drop so the new df must be ',df.shape[0]-indices_to_drop.shape[0])
print('the new df ',new_df_drop.shape)

"""now i will create table for average steps,distance,calories"""

average_steps=[]
average_distance=[]
average_calories=[]
number_of_steps_per_km=[]

for i in new_df.groupby('Id'):
  average_steps.append(int(i[1]['TotalSteps'].mean()))
  average_distance.append( int(i[1]['TotalDistance'].mean()))
  average_calories.append(int(i[1]['Calories'].mean()))
  sum_of_steps=i[1]['TotalSteps'].sum()
  distance=i[1]['TotalDistance'].sum()
  num_of_steps=sum_of_steps//distance

  number_of_steps_per_km.append(num_of_steps)

summary_table={ 'average daily step': average_steps ,
                'average distance':average_distance,
                'average calories':average_calories,
                'number of stteps per 1 km => speed ':number_of_steps_per_km}
summary_table=pd.DataFrame(summary_table)
display(summary_table)

"""⦁	Are there any patterns in activity levels or calorie burn over time (e.g., on weekends vs. weekdays)?

---



---



---


"""

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
days_order=['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
new_df['ActivityDate']=pd.Categorical(new_df['ActivityDate'],categories=days_order,ordered=True)
plt.figure(figsize=(10, 6)) # Optional: Adjust figure size for better readability
sns.lineplot(x='ActivityDate',y='TotalSteps',data=new_df)
plt.show()

"""⦁	Can we categorize users based on their activity levels?

---



---



---


"""

activity=new_df['TotalSteps']
# Convert the bin edges to integers
bins_values=np.linspace(activity.min(),activity.max(),7).astype(int)
bins=[bins_values]
labels=['Very Low','Low','Moderate Low','Moderate','High','Very High']
# Use the labels argument in pd.cut to show the categories
new_df['categories']=pd.cut(df['TotalSteps'],bins=bins_values,labels=labels)

# Display the DataFrame with the new 'categories' column
display(new_df[['TotalSteps', 'categories']])

from IPython.display import display, HTML

# Display the formatted text in bold and large size
display(HTML('<b><h2>Value counts for each category:</h2></b>'))

display(new_df['categories'].value_counts())